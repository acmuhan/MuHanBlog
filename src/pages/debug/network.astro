---
import Layout from "@layouts/Layout.astro";
---

<Layout title="网络调试工具 - MuHan's Blog">
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
      <!-- 页面标题 -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-90 mb-4">🔧 网络调试工具</h1>
        <p class="text-60">检查生产环境网络策略和外部HTTP服务访问能力</p>
      </div>

      <!-- 环境信息 -->
      <div class="card-base p-6 mb-6">
        <h2 class="text-xl font-semibold text-90 mb-4">📊 环境信息</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <strong class="text-70">当前域名:</strong>
            <span id="current-domain" class="text-60">检测中...</span>
          </div>
          <div>
            <strong class="text-70">协议:</strong>
            <span id="current-protocol" class="text-60">检测中...</span>
          </div>
          <div>
            <strong class="text-70">用户代理:</strong>
            <span id="user-agent" class="text-60 text-sm">检测中...</span>
          </div>
          <div>
            <strong class="text-70">时间戳:</strong>
            <span id="timestamp" class="text-60">检测中...</span>
          </div>
        </div>
      </div>

      <!-- 网络连通性测试 -->
      <div class="card-base p-6 mb-6">
        <h2 class="text-xl font-semibold text-90 mb-4">🌐 网络连通性测试</h2>
        
        <!-- 测试控制 -->
        <div class="mb-6">
          <button id="start-test" class="btn-primary mr-4">开始测试</button>
          <button id="clear-results" class="btn-secondary">清除结果</button>
        </div>

        <!-- 测试结果 -->
        <div id="test-results" class="space-y-4">
          <!-- 测试结果将在这里显示 -->
        </div>
      </div>

      <!-- 音乐API专项测试 -->
      <div class="card-base p-6 mb-6">
        <h2 class="text-xl font-semibold text-90 mb-4">🎵 音乐API专项测试</h2>
        
        <div class="mb-4">
          <button id="test-music-api" class="btn-primary">测试音乐API</button>
        </div>

        <div id="music-api-results" class="space-y-4">
          <!-- 音乐API测试结果 -->
        </div>
      </div>

      <!-- 代理API测试 -->
      <div class="card-base p-6 mb-6">
        <h2 class="text-xl font-semibold text-90 mb-4">🔄 代理API测试</h2>
        
        <div class="mb-4">
          <button id="test-proxy-api" class="btn-primary">测试代理API</button>
        </div>

        <div id="proxy-api-results" class="space-y-4">
          <!-- 代理API测试结果 -->
        </div>
      </div>

      <!-- 详细日志 -->
      <div class="card-base p-6">
        <h2 class="text-xl font-semibold text-90 mb-4">📝 详细日志</h2>
        <div class="mb-4">
          <button id="clear-logs" class="btn-secondary">清除日志</button>
        </div>
        <pre id="debug-logs" class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg text-sm overflow-auto max-h-96 text-60"></pre>
      </div>
    </div>
  </main>
</Layout>

<script>
  // 全局变量
  let testResults: any[] = [];
  let debugLogs: string[] = [];

  // DOM元素
  const startTestBtn = document.getElementById('start-test');
  const clearResultsBtn = document.getElementById('clear-results');
  const testMusicApiBtn = document.getElementById('test-music-api');
  const testProxyApiBtn = document.getElementById('test-proxy-api');
  const clearLogsBtn = document.getElementById('clear-logs');
  
  const testResultsEl = document.getElementById('test-results');
  const musicApiResultsEl = document.getElementById('music-api-results');
  const proxyApiResultsEl = document.getElementById('proxy-api-results');
  const debugLogsEl = document.getElementById('debug-logs');

  // 初始化页面
  function initializePage() {
    // 显示环境信息
    document.getElementById('current-domain')!.textContent = window.location.hostname;
    document.getElementById('current-protocol')!.textContent = window.location.protocol;
    document.getElementById('user-agent')!.textContent = navigator.userAgent;
    document.getElementById('timestamp')!.textContent = new Date().toLocaleString();

    log('页面初始化完成');
  }

  // 日志函数
  function log(message: string, type: string = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
    debugLogs.push(logEntry);
    
    if (debugLogsEl) {
      debugLogsEl.textContent = debugLogs.join('\n');
      debugLogsEl.scrollTop = debugLogsEl.scrollHeight;
    }
    
    console.log(logEntry);
  }

  // 创建测试结果元素
  function createTestResult(title: string, status: string, details: string = '', error: string | null = null) {
    const resultEl = document.createElement('div');
    resultEl.className = `p-4 rounded-lg border ${
      status === 'success' ? 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800' :
      status === 'error' ? 'bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800' :
      'bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800'
    }`;

    const statusIcon = status === 'success' ? '✅' : status === 'error' ? '❌' : '⚠️';
    const statusColor = status === 'success' ? 'text-green-700 dark:text-green-300' :
                       status === 'error' ? 'text-red-700 dark:text-red-300' :
                       'text-yellow-700 dark:text-yellow-300';

    resultEl.innerHTML = `
      <div class="flex items-start gap-3">
        <span class="text-xl">${statusIcon}</span>
        <div class="flex-1">
          <h3 class="font-semibold ${statusColor}">${title}</h3>
          ${details ? `<p class="text-sm text-60 mt-1">${details}</p>` : ''}
          ${error ? `<pre class="text-xs text-red-600 dark:text-red-400 mt-2 bg-red-100 dark:bg-red-900/30 p-2 rounded">${error}</pre>` : ''}
        </div>
      </div>
    `;

    return resultEl;
  }

  // 网络连通性测试
  async function testNetworkConnectivity() {
    log('开始网络连通性测试');
         testResultsEl!.innerHTML = '<div class="text-center text-60">测试进行中...</div>';

     const tests = [
      {
        name: '本地API测试',
        url: '/api/network-test?test=local',
        description: '测试本地API响应'
      },
      {
        name: '公共API测试 (HTTPS)',
        url: 'https://httpbin.org/get',
        description: '测试HTTPS外部API访问'
      },
      {
        name: '音乐API测试 (HTTP)',
        url: 'http://111.170.19.241:8002/playlist?playlist_id=12291029891&page=1&page_size=5',
        description: '直接测试音乐API HTTP端点'
      },
      {
        name: '音乐API测试 (HTTPS)',
        url: 'https://111.170.19.241:8002/playlist?playlist_id=12291029891&page=1&page_size=5',
        description: '直接测试音乐API HTTPS端点'
      }
    ];

     const results = [];
     testResultsEl!.innerHTML = '';

     for (const test of tests) {
      log(`测试: ${test.name} - ${test.url}`);
      
      try {
        const startTime = Date.now();
        const response = await fetch(test.url, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          signal: AbortSignal.timeout(10000) // 10秒超时
        });
        
        const endTime = Date.now();
        const duration = endTime - startTime;

        if (response.ok) {
          const contentType = response.headers.get('content-type');
          let responseData = '';
          
          try {
            if (contentType && contentType.includes('application/json')) {
              const json = await response.json();
              responseData = JSON.stringify(json, null, 2).substring(0, 200) + '...';
            } else {
              responseData = await response.text().then(text => text.substring(0, 200) + '...');
            }
          } catch (e) {
            responseData = '无法解析响应内容';
          }

          const result = createTestResult(
            test.name,
            'success',
            `${test.description} - 响应时间: ${duration}ms - 状态: ${response.status}`,
            responseData
          );
           testResultsEl!.appendChild(result);
           log(`✅ ${test.name} 成功 - ${duration}ms`, 'success');
         } else {
           const result = createTestResult(
             test.name,
             'error',
             `${test.description} - HTTP ${response.status}: ${response.statusText}`,
             null
           );
           testResultsEl!.appendChild(result);
          log(`❌ ${test.name} 失败 - HTTP ${response.status}`, 'error');
        }
       } catch (error) {
         const errorMessage = error instanceof Error ? error.message : String(error);
         const result = createTestResult(
           test.name,
           'error',
           `${test.description} - 连接失败`,
           errorMessage
         );
         testResultsEl!.appendChild(result);
         log(`❌ ${test.name} 错误: ${errorMessage}`, 'error');
      }
    }

    log('网络连通性测试完成');
  }

   // 音乐API专项测试
   async function testMusicAPI() {
     log('开始音乐API专项测试');
     musicApiResultsEl!.innerHTML = '<div class="text-center text-60">测试进行中...</div>';

     const endpoints = [
       'http://111.170.19.241:8002',
       'https://111.170.19.241:8002',
       'http://111.170.19.241:8002/playlist?playlist_id=12291029891&page=1&page_size=5'
     ];

     musicApiResultsEl!.innerHTML = '';

    for (const endpoint of endpoints) {
      try {
        log(`测试音乐API端点: ${endpoint}`);
        
        const response = await fetch(endpoint, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          signal: AbortSignal.timeout(8000)
        });

        if (response.ok) {
          const data = await response.json();
          const result = createTestResult(
            `音乐API: ${endpoint}`,
            'success',
            `成功获取数据 - 状态: ${response.status}`,
            JSON.stringify(data, null, 2).substring(0, 300) + '...'
          );
           musicApiResultsEl!.appendChild(result);
           log(`✅ 音乐API ${endpoint} 成功`, 'success');
         } else {
           const result = createTestResult(
             `音乐API: ${endpoint}`,
             'error',
             `HTTP ${response.status}: ${response.statusText}`,
             null
           );
           musicApiResultsEl!.appendChild(result);
          log(`❌ 音乐API ${endpoint} 失败 - HTTP ${response.status}`, 'error');
        }
       } catch (error) {
         const errorMessage = error instanceof Error ? error.message : String(error);
         const result = createTestResult(
           `音乐API: ${endpoint}`,
           'error',
           '连接失败',
           errorMessage
         );
         musicApiResultsEl!.appendChild(result);
         log(`❌ 音乐API ${endpoint} 错误: ${errorMessage}`, 'error');
      }
    }

    log('音乐API专项测试完成');
  }

   // 代理API测试
   async function testProxyAPI() {
     log('开始代理API测试');
     proxyApiResultsEl!.innerHTML = '<div class="text-center text-60">测试进行中...</div>';

     const tests = [
       {
         name: '音乐代理API',
         url: '/api/music-proxy?playlist_id=12291029891&page=1&page_size=5'
       },
       {
         name: '网络测试API',
         url: '/api/network-test?test=proxy'
       }
     ];

     proxyApiResultsEl!.innerHTML = '';

    for (const test of tests) {
      try {
        log(`测试代理API: ${test.name} - ${test.url}`);
        
        const response = await fetch(test.url, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          signal: AbortSignal.timeout(10000)
        });

        if (response.ok) {
          const data = await response.json();
          const result = createTestResult(
            test.name,
            'success',
            `代理API响应成功 - 状态: ${response.status}`,
            JSON.stringify(data, null, 2).substring(0, 300) + '...'
          );
           proxyApiResultsEl!.appendChild(result);
           log(`✅ ${test.name} 成功`, 'success');
         } else {
           const result = createTestResult(
             test.name,
             'error',
             `HTTP ${response.status}: ${response.statusText}`,
             null
           );
           proxyApiResultsEl!.appendChild(result);
          log(`❌ ${test.name} 失败 - HTTP ${response.status}`, 'error');
        }
       } catch (error) {
         const errorMessage = error instanceof Error ? error.message : String(error);
         const result = createTestResult(
           test.name,
           'error',
           '代理API请求失败',
           errorMessage
         );
         proxyApiResultsEl!.appendChild(result);
         log(`❌ ${test.name} 错误: ${errorMessage}`, 'error');
      }
    }

    log('代理API测试完成');
  }

  // 事件监听器
  startTestBtn?.addEventListener('click', testNetworkConnectivity);
  testMusicApiBtn?.addEventListener('click', testMusicAPI);
  testProxyApiBtn?.addEventListener('click', testProxyAPI);
  
   clearResultsBtn?.addEventListener('click', () => {
     testResultsEl!.innerHTML = '';
     musicApiResultsEl!.innerHTML = '';
     proxyApiResultsEl!.innerHTML = '';
     log('测试结果已清除');
   });

   clearLogsBtn?.addEventListener('click', () => {
     debugLogs = [];
     debugLogsEl!.textContent = '';
     log('日志已清除');
   });

  // 页面加载完成后初始化
  document.addEventListener('DOMContentLoaded', initializePage);
</script>

<style>
  .btn-primary {
    @apply bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors;
  }
  
  .btn-secondary {
    @apply bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg hover:opacity-90 transition-opacity;
  }
  
  .card-base {
    @apply bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700;
  }
</style>

